package controller

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
	"sync"
	"time"
)

const (
	// TelegramBotToken - —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
	TelegramBotToken = "5410005863:AAEkQsFcKe_V6cb0Cl4DugW_tX4334E7WtA"

	// CheckInterval - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
	CheckInterval = 2700 // 45 –º–∏–Ω—É—Ç

	// AlertDeduplicationWindow - –æ–∫–Ω–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Å–∞—Ö
	AlertDeduplicationWindow = 4

	// WebUIBaseURL - –±–∞–∑–æ–≤—ã–π URL –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
	WebUIBaseURL = "https://yandex.ru/images/search?from=tabbar&img_url=https%3A%2F%2Ficdn.lenta.ru%2Fimages%2F2025%2F05%2F13%2F18%2F20250513184839314%2Foriginal_88202f632e59f19d8938a1a03e58c8c4.jpg&lr=213&pos=0&rpt=simage&text=–æ–∫–∞–∫"
)

// ChatIDs - —Å–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
var ChatIDs = []int64{
	-4835116305,
}

// TelegramMessage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è API Telegram
type TelegramMessage struct {
	ChatID      int64                `json:"chat_id"`
	Text        string               `json:"text"`
	ParseMode   string               `json:"parse_mode,omitempty"`
	ReplyMarkup *TelegramReplyMarkup `json:"reply_markup,omitempty"`
}

// TelegramReplyMarkup –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram
type TelegramReplyMarkup struct {
	InlineKeyboard [][]TelegramInlineButton `json:"inline_keyboard"`
}

// TelegramInlineButton –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç inline-–∫–Ω–æ–ø–∫—É –≤ Telegram
type TelegramInlineButton struct {
	Text string `json:"text"`
	URL  string `json:"url"`
}

// PodInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–µ
type PodInfo struct {
	Name   string `json:"name"`
	Status string `json:"status"`
	// –î—Ä—É–≥–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã
}

// Recommendation —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
type Recommendation struct {
	Message    string               `json:"message"`
	Namespaces map[string][]PodInfo `json:"namespaces"`
}

// AlertTracker –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
type AlertTracker struct {
	sync.Mutex
	alerts map[string]time.Time // –∫–ª—é—á: namespace/pod, –∑–Ω–∞—á–µ–Ω–∏–µ: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
}

// NewAlertTracker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤
func NewAlertTracker() *AlertTracker {
	return &AlertTracker{
		alerts: make(map[string]time.Time),
	}
}

// ShouldSendAlert –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∞
func (a *AlertTracker) ShouldSendAlert(namespace, podName string) bool {
	a.Lock()
	defer a.Unlock()

	key := fmt.Sprintf("%s/%s", namespace, podName)
	lastAlert, exists := a.alerts[key]

	now := time.Now()
	// –ï—Å–ª–∏ –∞–ª–µ—Ä—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∫–Ω–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
	if !exists || now.Sub(lastAlert).Hours() >= AlertDeduplicationWindow {
		a.alerts[key] = now
		return true
	}

	return false
}

// CleanupOldAlerts —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞
func (a *AlertTracker) CleanupOldAlerts() {
	a.Lock()
	defer a.Unlock()

	threshold := time.Now().Add(-time.Hour * AlertDeduplicationWindow)
	for key, lastAlert := range a.alerts {
		if lastAlert.Before(threshold) {
			delete(a.alerts, key)
		}
	}
}

// StartTelegramBot –∑–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
func (r *KubedeckReconciler) StartTelegramBot(ctx context.Context) {
	log := webServerLog.WithName("telegram-bot")
	log.Info("Starting Telegram bot for alerts")

	tracker := NewAlertTracker()

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã
	go func() {
		ticker := time.NewTicker(time.Hour)
		defer ticker.Stop()

		for {
			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
				tracker.CleanupOldAlerts()
			}
		}
	}()

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
	go func() {
		ticker := time.NewTicker(time.Second * CheckInterval)
		defer ticker.Stop()

		// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
		r.checkResourcesAndSendAlerts(ctx, tracker)

		for {
			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
				r.checkResourcesAndSendAlerts(ctx, tracker)
			}
		}
	}()
}

// checkResourcesAndSendAlerts –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
func (r *KubedeckReconciler) checkResourcesAndSendAlerts(ctx context.Context, tracker *AlertTracker) {
	log := webServerLog.WithName("resource-checker")

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—É—Ä—Å–∞—Ö
	podResourceData, err := r.collectPodResourceData(ctx)
	if err != nil {
		log.Error(err, "Failed to collect pod resource data")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ LLM
	recommendation, err := r.getLLMResourceRecommendations(ctx, podResourceData)
	if err != nil {
		log.Error(err, "Failed to get LLM recommendations")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–¥–æ–≤
	hasProblematicPods := false
	totalProblematicPods := 0

	for _, pods := range recommendation.Namespaces {
		if len(pods) > 0 {
			hasProblematicPods = true
			totalProblematicPods += len(pods)
		}
	}

	if !hasProblematicPods {
		log.Info("No problematic pods found")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
	message := formatSummaryAlertMessage(recommendation, totalProblematicPods)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã
	for _, chatID := range ChatIDs {
		err := sendTelegramSummaryMessage(chatID, message)
		if err != nil {
			log.Error(err, "Failed to send Telegram summary alert", "chatID", chatID)
		} else {
			log.Info("Sent Telegram summary alert", "chatID", chatID, "problematicPods", totalProblematicPods)
		}
	}
}

// formatSummaryAlertMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
func formatSummaryAlertMessage(recommendation *ResourceRecommendationResponse, totalPods int) string {
	var sb strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
	sb.WriteString("*Kubernetes Resource Alert Summary*\n\n")
	sb.WriteString(fmt.Sprintf("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ *%d* –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–¥–æ–≤\n\n", totalPods))

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–µ–π–º—Å–ø–µ–π—Å—É
	for namespace, pods := range recommendation.Namespaces {
		if len(pods) == 0 {
			continue
		}

		sb.WriteString(fmt.Sprintf("*Namespace:* `%s`\n", namespace))
		sb.WriteString(fmt.Sprintf("–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–¥–æ–≤: %d\n", len(pods)))

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
		criticalCount := 0
		warningCount := 0
		infoCount := 0

		for _, pod := range pods {
			switch pod.Status {
			case "critical":
				criticalCount++
			case "warning":
				warningCount++
			default:
				infoCount++
			}
		}

		if criticalCount > 0 {
			sb.WriteString(fmt.Sprintf("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: %d\n", criticalCount))
		}
		if warningCount > 0 {
			sb.WriteString(fmt.Sprintf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: %d\n", warningCount))
		}
		if infoCount > 0 {
			sb.WriteString(fmt.Sprintf("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö: %d\n", infoCount))
		}

		sb.WriteString("\n")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
	sb.WriteString("*–û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n")
	sb.WriteString(recommendation.Message)

	return sb.String()
}

// sendTelegramSummaryMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
func sendTelegramSummaryMessage(chatID int64, text string) error {
	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", TelegramBotToken)

	message := TelegramMessage{
		ChatID:    chatID,
		Text:      text,
		ParseMode: "Markdown",
		ReplyMarkup: &TelegramReplyMarkup{
			InlineKeyboard: [][]TelegramInlineButton{
				{
					{
						Text: "–û—Ç–∫—Ä—ã—Ç—å –≤ Kubedeck",
						URL:  WebUIBaseURL,
					},
				},
			},
		},
	}

	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("failed to marshal telegram message: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to send telegram message: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		var errorResponse map[string]any
		if err := json.NewDecoder(resp.Body).Decode(&errorResponse); err != nil {
			return fmt.Errorf("telegram API error: status code %d", resp.StatusCode)
		}
		return fmt.Errorf("telegram API error: %v", errorResponse)
	}

	return nil
}
